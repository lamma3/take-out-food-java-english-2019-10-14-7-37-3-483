import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        StringBuffer sb = new StringBuffer();
        List<Item> itemList = this.itemRepository.findAll();
        List<SalesPromotion> salesPromotionList = this.salesPromotionRepository.findAll();
        Map<Item, Integer> orderMap = new LinkedHashMap<>();
        int cost = 0;

        for(String input: inputs) {
            String[] params = input.split(" x ");
            Item selectedItem = null;
            for(Item item: itemList) {
                if(item.getId().equals(params[0])) {
                    selectedItem = item;
                }
            }
            int count = Integer.parseInt(params[1]);
            orderMap.put(selectedItem, count);
        }

        for(Map.Entry<Item, Integer> entry: orderMap.entrySet()) {
            cost += entry.getKey().getPrice() * entry.getValue();
        }

        SalesPromotion bestChoice = null;
        int saving = 0;
        for(SalesPromotion salesPromotion: salesPromotionList) {
            if(salesPromotion.getType().equals("BUY_30_SAVE_6_YUAN")) {
                if(cost >= 30 && (saving < 6)) {
                    saving = 6;
                    bestChoice = salesPromotion;
                }
            }

            if(salesPromotion.getType().equals("50%_DISCOUNT_ON_SPECIFIED_ITEMS")) {
                int salesCost = cost;
                for(Map.Entry<Item, Integer> entry: orderMap.entrySet()) {
                    for(String itemId: salesPromotion.getRelatedItems()) {
                        if(itemId.equals(entry.getKey().getId())) {
                            salesCost -= (int)((entry.getKey().getPrice() * entry.getValue()) - (entry.getKey().getPrice() * entry.getValue() / 2));
                        }
                    }
                }

                if(cost - salesCost > saving) {
                    saving = cost - salesCost;
                    bestChoice = salesPromotion;
                }
            }
        }

        sb.append("============= Order details =============\n");
        for(Map.Entry<Item, Integer> entry: orderMap.entrySet()) {
            sb.append(String.format("%s x %d = %d yuan\n", entry.getKey().getName(), entry.getValue(), (int)entry.getKey().getPrice() * entry.getValue()));
        }
        sb.append("-----------------------------------\n");
        if(bestChoice != null) {
            sb.append("Promotion used:\n");
            if(bestChoice.getType().equals("BUY_30_SAVE_6_YUAN")) {
                sb.append("满30减6 yuan");
            }
            if(bestChoice.getType().equals("50%_DISCOUNT_ON_SPECIFIED_ITEMS")) {
                sb.append(bestChoice.getDisplayName());
                sb.append(" (");
                List<String> itemNames = new ArrayList<>();
                for(String itemId: bestChoice.getRelatedItems()) {
                    for(Item item: itemList) {
                        if(itemId.equals(item.getId())) {
                            itemNames.add(item.getName());
                        }
                    }
                }
                sb.append(String.join("，", itemNames));
                sb.append(")");
            }
            sb.append(String.format("，saving %d yuan\n", saving));
            sb.append("-----------------------------------\n");
        }
        sb.append(String.format("Total：%d yuan\n", cost - saving));
        sb.append("===================================");
        return sb.toString();
    }
}
